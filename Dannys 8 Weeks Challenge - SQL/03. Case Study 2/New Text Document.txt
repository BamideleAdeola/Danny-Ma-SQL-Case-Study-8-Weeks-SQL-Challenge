CREATE WAREHOUSE my_warehouse
WITH WAREHOUSE_SIZE = 'XSMALL' AUTO_SUSPEND = 60 AUTO_RESUME = TRUE;


USE my_data_warehouse

-- CREATE A SCHEMA
CREATE SCHEMA pizza_runner;

DROP TABLE IF EXISTS runners;
CREATE TABLE runners (
  "runner_id" INTEGER,
  "registration_date" DATE
);
INSERT INTO runners
  ("runner_id", "registration_date")
VALUES
  (1, '2021-01-01'),
  (2, '2021-01-03'),
  (3, '2021-01-08'),
  (4, '2021-01-15');


DROP TABLE IF EXISTS customer_orders;
CREATE TABLE customer_orders (
  "order_id" INTEGER,
  "customer_id" INTEGER,
  "pizza_id" INTEGER,
  "exclusions" VARCHAR(4),
  "extras" VARCHAR(4),
  "order_time" TIMESTAMP
);

INSERT INTO customer_orders
  ("order_id", "customer_id", "pizza_id", "exclusions", "extras", "order_time")
VALUES
  ('1', '101', '1', '', '', '2020-01-01 18:05:02'),
  ('2', '101', '1', '', '', '2020-01-01 19:00:52'),
  ('3', '102', '1', '', '', '2020-01-02 23:51:23'),
  ('3', '102', '2', '', NULL, '2020-01-02 23:51:23'),
  ('4', '103', '1', '4', '', '2020-01-04 13:23:46'),
  ('4', '103', '1', '4', '', '2020-01-04 13:23:46'),
  ('4', '103', '2', '4', '', '2020-01-04 13:23:46'),
  ('5', '104', '1', 'null', '1', '2020-01-08 21:00:29'),
  ('6', '101', '2', 'null', 'null', '2020-01-08 21:03:13'),
  ('7', '105', '2', 'null', '1', '2020-01-08 21:20:29'),
  ('8', '102', '1', 'null', 'null', '2020-01-09 23:54:33'),
  ('9', '103', '1', '4', '1, 5', '2020-01-10 11:22:59'),
  ('10', '104', '1', 'null', 'null', '2020-01-11 18:34:49'),
  ('10', '104', '1', '2, 6', '1, 4', '2020-01-11 18:34:49');


DROP TABLE IF EXISTS runner_orders;
CREATE TABLE runner_orders (
  "order_id" INTEGER,
  "runner_id" INTEGER,
  "pickup_time" VARCHAR(19),
  "distance" VARCHAR(7),
  "duration" VARCHAR(10),
  "cancellation" VARCHAR(23)
);

INSERT INTO runner_orders
  ("order_id", "runner_id", "pickup_time", "distance", "duration", "cancellation")
VALUES
  ('1', '1', '2020-01-01 18:15:34', '20km', '32 minutes', ''),
  ('2', '1', '2020-01-01 19:10:54', '20km', '27 minutes', ''),
  ('3', '1', '2020-01-03 00:12:37', '13.4km', '20 mins', NULL),
  ('4', '2', '2020-01-04 13:53:03', '23.4', '40', NULL),
  ('5', '3', '2020-01-08 21:10:57', '10', '15', NULL),
  ('6', '3', 'null', 'null', 'null', 'Restaurant Cancellation'),
  ('7', '2', '2020-01-08 21:30:45', '25km', '25mins', 'null'),
  ('8', '2', '2020-01-10 00:15:02', '23.4 km', '15 minute', 'null'),
  ('9', '2', 'null', 'null', 'null', 'Customer Cancellation'),
  ('10', '1', '2020-01-11 18:50:20', '10km', '10minutes', 'null');


DROP TABLE IF EXISTS pizza_names;
CREATE TABLE pizza_names (
  "pizza_id" INTEGER,
  "pizza_name" TEXT
);
INSERT INTO pizza_names
  ("pizza_id", "pizza_name")
VALUES
  (1, 'Meatlovers'),
  (2, 'Vegetarian');


DROP TABLE IF EXISTS pizza_recipes;
CREATE TABLE pizza_recipes (
  "pizza_id" INTEGER,
  "toppings" TEXT
);
INSERT INTO pizza_recipes
  ("pizza_id", "toppings")
VALUES
  (1, '1, 2, 3, 4, 5, 6, 8, 10'),
  (2, '4, 6, 7, 9, 11, 12');


DROP TABLE IF EXISTS pizza_toppings;
CREATE TABLE pizza_toppings (
  "topping_id" INTEGER,
  "topping_name" TEXT
);
INSERT INTO pizza_toppings
  ("topping_id", "topping_name")
VALUESMY_DATA_WAREHOUSE.PIZZA_RUNNER
  (1, 'Bacon'),
  (2, 'BBQ Sauce'),
  (3, 'Beef'),
  (4, 'Cheese'),
  (5, 'Chicken'),
  (6, 'Mushrooms'),
  (7, 'Onions'),
  (8, 'Pepperoni'),
  (9, 'Peppers'),
  (10, 'Salami'),
  (11, 'Tomatoes'),
  (12, 'Tomato Sauce');
/*
A. Pizza Metrics
1. How many pizzas were ordered?
2. How many unique customer orders were made?
3. How many successful orders were delivered by each runner?
4. How many of each type of pizza was delivered?
5. How many Vegetarian and Meatlovers were ordered by each customer?
6. What was the maximum number of pizzas delivered in a single order?
7. For each customer, how many delivered pizzas had at least 1 change and how many had no changes?
8. How many pizzas were delivered that had both exclusions and extras?
9. What was the total volume of pizzas ordered for each hour of the day?
10. What was the volume of orders for each day of the week?
*/

SELECT * FROM customer_orders;
SELECT * FROM runner_orders;
SELECT * FROM RUNNERS;

-- A. Pizza Metrics
-- 1. How many pizzas were ordered?

SELECT 
    COUNT("order_id") AS totalOrder
FROM CUSTOMER_ORDERS;


-- 2. How many unique customer orders were made?
SELECT 
    COUNT( DISTINCT "order_id") AS unique_customers_orders
FROM CUSTOMER_ORDERS;

/*3. How many successful orders were 
delivered by each runner? */
SELECT 
    "runner_id",
    COUNT("order_id") AS successful_orders
FROM pizza_runner.runner_orders
WHERE "cancellation" IS NULL OR "cancellation" = ''
GROUP BY "runner_id";


SELECT * FROM pizza_runner.runner_orders
SELECT * FROM CUSTOMER_ORDERS

/*3. How many successful orders were 
delivered by each runner? */
SELECT 
    ro."runner_id",
    COUNT(c."order_id") AS successful_orders
FROM CUSTOMER_ORDERS c
JOIN pizza_runner.runner_orders ro ON ro."order_id" = c."order_id"
WHERE ro."cancellation" IS NULL OR ro."cancellation" = ''
GROUP BY ro."runner_id";

-- 4. How many of each type of pizza was delivered?
SELECT 
    pn."pizza_name",
    COUNT(co."order_id" ) AS total_delivered
FROM customer_orders co
JOIN runner_orders ro ON co."order_id" = ro."order_id"
JOIN pizza_names pn ON pn."pizza_id" = co."pizza_id"
WHERE ro."cancellation" IS NULL
GROUP BY  pn."pizza_name";


-- 5. How many Vegetarian and Meatlovers were ordered by each customer?
SELECT 
    co."customer_id",
    SUM(CASE WHEN  pn."pizza_name" = 'Vegetarian' THEN 1 ELSE 0 END) AS vegetarian_pizzas,
    SUM(CASE WHEN  pn."pizza_name" = 'Meatlovers' THEN 1 ELSE 0 END) AS Meatlovers_pizzas
FROM customer_orders co
JOIN pizza_names pn ON pn."pizza_id" = co."pizza_id"
GROUP BY co."customer_id";
// c/o BAMS for 8 weeks SQL Challenge by Danny Ma

-- 6. What was the maximum number of pizzas delivered in a single order?

WITH orderscount AS
(
    SELECT 
        co."order_id",
        COUNT(co."pizza_id") AS pizza_count        
    FROM customer_orders co
    JOIN runner_orders ro ON ro."order_id" = co."order_id"
    WHERE ro."cancellation" IS NULL
    GROUP BY co."order_id"
)
SELECT 
    MAX(pizza_count) AS max_pizzas_per_order
FROM orderscount;
// c/o BAMS for 8 weeks SQL Challenge by Danny Ma


-- 7. For each customer, how many delivered pizzas had at least 1 change and how many had no changes?
SELECT co."customer_id",
       Sum(CASE
             WHEN "exclusions" IS NOT NULL
                   OR "extras" IS NOT NULL THEN 1
             ELSE 0
           END) AS pizzas_with_changes,
       Sum(CASE
             WHEN "exclusions" IS NULL
                   OR "extras" IS NULL THEN 1
             ELSE 0
           END) AS pizzas_without_changes
FROM   customer_orders co
       JOIN runner_orders ro
         ON ro."order_id" = co."order_id"
WHERE  ro."cancellation" IS NULL
        OR ro."cancellation" = ''
GROUP  BY co."customer_id"; 

-- 8. How many pizzas were delivered that had both exclusions and extras?

SELECT Count(co."order_id") AS pizzas_with_exclusions_and_extras
FROM   customer_orders co
       JOIN runner_orders ro
         ON ro."order_id" = co."order_id"
WHERE  "exclusions" IS NOT NULL
       AND "extras" IS NOT NULL
       AND ( ro."cancellation" IS NULL
              OR ro."cancellation" = '' ); 

select * from runner_orders


-- 9. What was the total volume of pizzas ordered for each hour of the day?

SELECT Extract(hour FROM "order_time") AS order_hour_of_day,
       Count(co."order_id")            AS total_pizzas
FROM   customer_orders co
GROUP  BY order_hour_of_day
ORDER  BY order_hour_of_day; 


-- 10. What was the volume of orders for each day of the week?

SELECT 
DAYNAME("order_time") AS day_of_week,
COUNT("order_id") AS total_orders
FROM customer_orders
GROUP BY day_of_week
ORDER BY day_of_week;

SELECT 
DAYNAME("order_time") AS day_of_week,
COUNT("order_id") AS total_orders
FROM customer_orders
GROUP BY DAYNAME("order_time")
ORDER BY day_of_week






  